#!/usr/bin/env bash
# aider-metrics - Display and analyze Aider API usage metrics
#
# Usage:
#   aider-metrics [command] [options]
#
# Commands:
#   summary         Show summary of all sessions (default)
#   watch           Watch metrics in real-time
#   today           Show today's usage
#   week            Show this week's usage
#   month           Show this month's usage
#   session <id>    Show specific session details
#   export          Export metrics to CSV
#   reset           Clear all metrics (with confirmation)
#
# Environment variables:
#   METRICS_DIR - Directory containing metrics (default: ./.metrics)

set -euo pipefail

# Configuration
METRICS_DIR="${METRICS_DIR:-./.metrics}"
METRICS_FILE="${METRICS_DIR}/aider_usage.jsonl"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "${BOLD}${CYAN}$1${NC}"
    echo -e "${CYAN}$(printf '=%.0s' {1..60})${NC}"
}

print_metric() {
    local label="$1"
    local value="$2"
    local color="${3:-$NC}"
    printf "%-25s ${color}%s${NC}\n" "$label:" "$value"
}

check_metrics_file() {
    if [[ ! -f "$METRICS_FILE" ]]; then
        echo -e "${YELLOW}No metrics file found at: $METRICS_FILE${NC}"
        echo "Run aider-with-metrics to start collecting metrics."
        exit 1
    fi
}

# Command: summary
cmd_summary() {
    check_metrics_file

    print_header "Aider API Usage Summary"
    echo ""

    # Total sessions
    local total_sessions=$(wc -l < "$METRICS_FILE")

    # Calculate totals using jq
    if ! command -v jq >/dev/null 2>&1; then
        echo -e "${RED}Error: jq is required for metrics analysis${NC}"
        echo "Install with: brew install jq"
        exit 1
    fi

    local stats=$(jq -s '{
        total_sessions: length,
        total_duration: (map(.duration_seconds) | add),
        total_input_tokens: (map(.input_tokens) | add),
        total_output_tokens: (map(.output_tokens) | add),
        total_tokens: (map(.total_tokens) | add),
        total_cost: (map(.cost_usd) | add),
        total_commits: (map(.commits) | add),
        total_files: (map(.files_modified) | add),
        avg_duration: (map(.duration_seconds) | add / length),
        avg_cost: (map(.cost_usd) | add / length),
        models: (map(.model) | unique)
    }' "$METRICS_FILE")

    print_metric "Total Sessions" "$(echo "$stats" | jq -r '.total_sessions')" "$BOLD"
    print_metric "Total Duration" "$(echo "$stats" | jq -r '.total_duration | floor')s ($(echo "$stats" | jq -r '(.total_duration / 3600) | floor')h $(echo "$stats" | jq -r '((.total_duration % 3600) / 60) | floor')m)" "$GREEN"
    echo ""

    print_metric "Total Input Tokens" "$(echo "$stats" | jq -r '.total_input_tokens | tonumber | . / 1000 | floor')K" "$BLUE"
    print_metric "Total Output Tokens" "$(echo "$stats" | jq -r '.total_output_tokens | tonumber | . / 1000 | floor')K" "$BLUE"
    print_metric "Total Tokens" "$(echo "$stats" | jq -r '.total_tokens | tonumber | . / 1000 | floor')K" "$BOLD$BLUE"
    echo ""

    print_metric "Total Cost" "\$$(echo "$stats" | jq -r '.total_cost | tonumber | . * 100 | floor | . / 100')" "$BOLD$MAGENTA"
    print_metric "Average Cost/Session" "\$$(echo "$stats" | jq -r '.avg_cost | tonumber | . * 100 | floor | . / 100')" "$MAGENTA"
    echo ""

    print_metric "Total Commits" "$(echo "$stats" | jq -r '.total_commits')" "$GREEN"
    print_metric "Total Files Modified" "$(echo "$stats" | jq -r '.total_files')" "$GREEN"
    echo ""

    print_metric "Models Used" "$(echo "$stats" | jq -r '.models | join(", ")')" "$CYAN"
    echo ""

    # Recent sessions
    print_header "Recent Sessions (last 5)"
    echo ""
    jq -r -s 'sort_by(.timestamp) | reverse | limit(5; .[]) |
        "\(.timestamp | split("T")[0]) \(.timestamp | split("T")[1] | split(".")[0]) | \(.model | .[0:20]) | \(.total_tokens)t | $\(.cost_usd) | \(.duration_seconds)s | \(.commits)c \(.files_modified)f"' \
        "$METRICS_FILE" | while read -r line; do
        echo -e "  ${CYAN}$line${NC}"
    done
    echo ""
}

# Command: watch
cmd_watch() {
    check_metrics_file

    echo -e "${YELLOW}Watching metrics... (Ctrl+C to exit)${NC}"
    echo ""

    while true; do
        clear
        cmd_summary
        sleep 5
    done
}

# Command: today
cmd_today() {
    check_metrics_file

    local today=$(date -u +%Y-%m-%d)
    print_header "Today's Usage ($today)"
    echo ""

    local stats=$(jq -s --arg today "$today" '
        map(select(.timestamp | startswith($today))) | {
            sessions: length,
            total_tokens: (map(.total_tokens) | add // 0),
            total_cost: (map(.cost_usd) | add // 0),
            commits: (map(.commits) | add // 0)
        }' "$METRICS_FILE")

    print_metric "Sessions Today" "$(echo "$stats" | jq -r '.sessions')" "$BOLD"
    print_metric "Tokens Used" "$(echo "$stats" | jq -r '.total_tokens | tonumber | . / 1000 | floor')K" "$BLUE"
    print_metric "Cost Today" "\$$(echo "$stats" | jq -r '.total_cost | tonumber | . * 100 | floor | . / 100')" "$MAGENTA"
    print_metric "Commits" "$(echo "$stats" | jq -r '.commits')" "$GREEN"
    echo ""
}

# Command: week
cmd_week() {
    check_metrics_file

    local week_start=$(date -u -v-7d +%Y-%m-%d)
    print_header "This Week's Usage (since $week_start)"
    echo ""

    local stats=$(jq -s --arg week_start "$week_start" '
        map(select(.timestamp >= $week_start)) | {
            sessions: length,
            total_tokens: (map(.total_tokens) | add // 0),
            total_cost: (map(.cost_usd) | add // 0),
            commits: (map(.commits) | add // 0)
        }' "$METRICS_FILE")

    print_metric "Sessions This Week" "$(echo "$stats" | jq -r '.sessions')" "$BOLD"
    print_metric "Tokens Used" "$(echo "$stats" | jq -r '.total_tokens | tonumber | . / 1000 | floor')K" "$BLUE"
    print_metric "Cost This Week" "\$$(echo "$stats" | jq -r '.total_cost | tonumber | . * 100 | floor | . / 100')" "$MAGENTA"
    print_metric "Commits" "$(echo "$stats" | jq -r '.commits')" "$GREEN"
    echo ""
}

# Command: export
cmd_export() {
    check_metrics_file

    local output_file="${METRICS_DIR}/aider_usage.csv"

    echo "Exporting metrics to CSV..."
    jq -r -s '(.[0] | keys_unsorted) as $keys | $keys,
        map([.[ $keys[] ]]) | .[] | @csv' "$METRICS_FILE" > "$output_file"

    echo -e "${GREEN}Exported to: $output_file${NC}"
}

# Command: reset
cmd_reset() {
    check_metrics_file

    echo -e "${RED}WARNING: This will delete all metrics data!${NC}"
    read -p "Are you sure? (yes/no): " -r

    if [[ $REPLY == "yes" ]]; then
        rm -f "$METRICS_FILE"
        echo -e "${GREEN}Metrics reset successfully${NC}"
    else
        echo "Cancelled"
    fi
}

# Main
COMMAND="${1:-summary}"

case "$COMMAND" in
    summary)
        cmd_summary
        ;;
    watch)
        cmd_watch
        ;;
    today)
        cmd_today
        ;;
    week)
        cmd_week
        ;;
    export)
        cmd_export
        ;;
    reset)
        cmd_reset
        ;;
    help|--help|-h)
        grep '^#' "$0" | grep -v '#!/' | sed 's/^# //' | sed 's/^#//'
        ;;
    *)
        echo -e "${RED}Unknown command: $COMMAND${NC}"
        echo "Run 'aider-metrics help' for usage information"
        exit 1
        ;;
esac
